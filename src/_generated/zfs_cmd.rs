/* automatically generated by rust-bindgen 0.55.1 */

pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __uint64_t = ::std::os::raw::c_ulong;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum boolean_t {
    B_FALSE = 0,
    B_TRUE = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum dmu_objset_type {
    DMU_OST_NONE = 0,
    DMU_OST_META = 1,
    DMU_OST_ZFS = 2,
    DMU_OST_ZVOL = 3,
    DMU_OST_OTHER = 4,
    DMU_OST_ANY = 5,
    DMU_OST_NUMTYPES = 6,
}
pub use self::dmu_objset_type as dmu_objset_type_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dmu_objset_stats {
    pub dds_num_clones: u64,
    pub dds_creation_txg: u64,
    pub dds_guid: u64,
    pub dds_type: dmu_objset_type_t,
    pub dds_is_snapshot: u8,
    pub dds_inconsistent: u8,
    pub dds_redacted: u8,
    pub dds_origin: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_dmu_objset_stats() {
    assert_eq!(
        ::std::mem::size_of::<dmu_objset_stats>(),
        288usize,
        concat!("Size of: ", stringify!(dmu_objset_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<dmu_objset_stats>(),
        8usize,
        concat!("Alignment of ", stringify!(dmu_objset_stats))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dmu_objset_stats>())).dds_num_clones as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dmu_objset_stats),
            "::",
            stringify!(dds_num_clones)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dmu_objset_stats>())).dds_creation_txg as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dmu_objset_stats),
            "::",
            stringify!(dds_creation_txg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dmu_objset_stats>())).dds_guid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dmu_objset_stats),
            "::",
            stringify!(dds_guid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dmu_objset_stats>())).dds_type as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(dmu_objset_stats),
            "::",
            stringify!(dds_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dmu_objset_stats>())).dds_is_snapshot as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(dmu_objset_stats),
            "::",
            stringify!(dds_is_snapshot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dmu_objset_stats>())).dds_inconsistent as *const _ as usize
        },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(dmu_objset_stats),
            "::",
            stringify!(dds_inconsistent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dmu_objset_stats>())).dds_redacted as *const _ as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(dmu_objset_stats),
            "::",
            stringify!(dds_redacted)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dmu_objset_stats>())).dds_origin as *const _ as usize },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(dmu_objset_stats),
            "::",
            stringify!(dds_origin)
        )
    );
}
impl Default for dmu_objset_stats {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type dmu_objset_stats_t = dmu_objset_stats;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct zfs_stat {
    pub zs_gen: u64,
    pub zs_mode: u64,
    pub zs_links: u64,
    pub zs_ctime: [u64; 2usize],
}
#[test]
fn bindgen_test_layout_zfs_stat() {
    assert_eq!(
        ::std::mem::size_of::<zfs_stat>(),
        40usize,
        concat!("Size of: ", stringify!(zfs_stat))
    );
    assert_eq!(
        ::std::mem::align_of::<zfs_stat>(),
        8usize,
        concat!("Alignment of ", stringify!(zfs_stat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_stat>())).zs_gen as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_stat),
            "::",
            stringify!(zs_gen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_stat>())).zs_mode as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_stat),
            "::",
            stringify!(zs_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_stat>())).zs_links as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_stat),
            "::",
            stringify!(zs_links)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_stat>())).zs_ctime as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_stat),
            "::",
            stringify!(zs_ctime)
        )
    );
}
pub type zfs_stat_t = zfs_stat;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct drr_begin {
    pub drr_magic: u64,
    pub drr_versioninfo: u64,
    pub drr_creation_time: u64,
    pub drr_type: dmu_objset_type_t,
    pub drr_flags: u32,
    pub drr_toguid: u64,
    pub drr_fromguid: u64,
    pub drr_toname: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_drr_begin() {
    assert_eq!(
        ::std::mem::size_of::<drr_begin>(),
        304usize,
        concat!("Size of: ", stringify!(drr_begin))
    );
    assert_eq!(
        ::std::mem::align_of::<drr_begin>(),
        8usize,
        concat!("Alignment of ", stringify!(drr_begin))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drr_begin>())).drr_magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drr_begin),
            "::",
            stringify!(drr_magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drr_begin>())).drr_versioninfo as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drr_begin),
            "::",
            stringify!(drr_versioninfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drr_begin>())).drr_creation_time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drr_begin),
            "::",
            stringify!(drr_creation_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drr_begin>())).drr_type as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(drr_begin),
            "::",
            stringify!(drr_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drr_begin>())).drr_flags as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(drr_begin),
            "::",
            stringify!(drr_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drr_begin>())).drr_toguid as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(drr_begin),
            "::",
            stringify!(drr_toguid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drr_begin>())).drr_fromguid as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(drr_begin),
            "::",
            stringify!(drr_fromguid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drr_begin>())).drr_toname as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(drr_begin),
            "::",
            stringify!(drr_toname)
        )
    );
}
impl Default for drr_begin {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct zinject_record {
    pub zi_objset: u64,
    pub zi_object: u64,
    pub zi_start: u64,
    pub zi_end: u64,
    pub zi_guid: u64,
    pub zi_level: u32,
    pub zi_error: u32,
    pub zi_type: u64,
    pub zi_freq: u32,
    pub zi_failfast: u32,
    pub zi_func: [::std::os::raw::c_char; 256usize],
    pub zi_iotype: u32,
    pub zi_duration: i32,
    pub zi_timer: u64,
    pub zi_nlanes: u64,
    pub zi_cmd: u32,
    pub zi_dvas: u32,
}
#[test]
fn bindgen_test_layout_zinject_record() {
    assert_eq!(
        ::std::mem::size_of::<zinject_record>(),
        352usize,
        concat!("Size of: ", stringify!(zinject_record))
    );
    assert_eq!(
        ::std::mem::align_of::<zinject_record>(),
        8usize,
        concat!("Alignment of ", stringify!(zinject_record))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zinject_record>())).zi_objset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(zinject_record),
            "::",
            stringify!(zi_objset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zinject_record>())).zi_object as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(zinject_record),
            "::",
            stringify!(zi_object)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zinject_record>())).zi_start as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(zinject_record),
            "::",
            stringify!(zi_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zinject_record>())).zi_end as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(zinject_record),
            "::",
            stringify!(zi_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zinject_record>())).zi_guid as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(zinject_record),
            "::",
            stringify!(zi_guid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zinject_record>())).zi_level as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(zinject_record),
            "::",
            stringify!(zi_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zinject_record>())).zi_error as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(zinject_record),
            "::",
            stringify!(zi_error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zinject_record>())).zi_type as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(zinject_record),
            "::",
            stringify!(zi_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zinject_record>())).zi_freq as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(zinject_record),
            "::",
            stringify!(zi_freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zinject_record>())).zi_failfast as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(zinject_record),
            "::",
            stringify!(zi_failfast)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zinject_record>())).zi_func as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(zinject_record),
            "::",
            stringify!(zi_func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zinject_record>())).zi_iotype as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(zinject_record),
            "::",
            stringify!(zi_iotype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zinject_record>())).zi_duration as *const _ as usize },
        324usize,
        concat!(
            "Offset of field: ",
            stringify!(zinject_record),
            "::",
            stringify!(zi_duration)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zinject_record>())).zi_timer as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(zinject_record),
            "::",
            stringify!(zi_timer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zinject_record>())).zi_nlanes as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(zinject_record),
            "::",
            stringify!(zi_nlanes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zinject_record>())).zi_cmd as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(zinject_record),
            "::",
            stringify!(zi_cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zinject_record>())).zi_dvas as *const _ as usize },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(zinject_record),
            "::",
            stringify!(zi_dvas)
        )
    );
}
impl Default for zinject_record {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type zinject_record_t = zinject_record;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct zfs_share {
    pub z_exportdata: u64,
    pub z_sharedata: u64,
    pub z_sharetype: u64,
    pub z_sharemax: u64,
}
#[test]
fn bindgen_test_layout_zfs_share() {
    assert_eq!(
        ::std::mem::size_of::<zfs_share>(),
        32usize,
        concat!("Size of: ", stringify!(zfs_share))
    );
    assert_eq!(
        ::std::mem::align_of::<zfs_share>(),
        8usize,
        concat!("Alignment of ", stringify!(zfs_share))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_share>())).z_exportdata as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_share),
            "::",
            stringify!(z_exportdata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_share>())).z_sharedata as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_share),
            "::",
            stringify!(z_sharedata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_share>())).z_sharetype as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_share),
            "::",
            stringify!(z_sharetype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_share>())).z_sharemax as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_share),
            "::",
            stringify!(z_sharemax)
        )
    );
}
pub type zfs_share_t = zfs_share;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct zfs_cmd {
    pub zc_name: [::std::os::raw::c_char; 4096usize],
    pub zc_nvlist_src: u64,
    pub zc_nvlist_src_size: u64,
    pub zc_nvlist_dst: u64,
    pub zc_nvlist_dst_size: u64,
    pub zc_nvlist_dst_filled: boolean_t,
    pub zc_pad2: ::std::os::raw::c_int,
    pub zc_history: u64,
    pub zc_value: [::std::os::raw::c_char; 8192usize],
    pub zc_string: [::std::os::raw::c_char; 256usize],
    pub zc_guid: u64,
    pub zc_nvlist_conf: u64,
    pub zc_nvlist_conf_size: u64,
    pub zc_cookie: u64,
    pub zc_objset_type: u64,
    pub zc_perm_action: u64,
    pub zc_history_len: u64,
    pub zc_history_offset: u64,
    pub zc_obj: u64,
    pub zc_iflags: u64,
    pub zc_share: zfs_share_t,
    pub zc_objset_stats: dmu_objset_stats_t,
    pub zc_begin_record: drr_begin,
    pub zc_inject_record: zinject_record_t,
    pub zc_defer_destroy: u32,
    pub zc_flags: u32,
    pub zc_action_handle: u64,
    pub zc_cleanup_fd: ::std::os::raw::c_int,
    pub zc_simple: u8,
    pub zc_pad: [u8; 3usize],
    pub zc_sendobj: u64,
    pub zc_fromobj: u64,
    pub zc_createtxg: u64,
    pub zc_stat: zfs_stat_t,
    pub zc_zoneid: u64,
}
#[test]
fn bindgen_test_layout_zfs_cmd() {
    assert_eq!(
        ::std::mem::size_of::<zfs_cmd>(),
        13744usize,
        concat!("Size of: ", stringify!(zfs_cmd))
    );
    assert_eq!(
        ::std::mem::align_of::<zfs_cmd>(),
        8usize,
        concat!("Alignment of ", stringify!(zfs_cmd))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_cmd>())).zc_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_cmd),
            "::",
            stringify!(zc_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_cmd>())).zc_nvlist_src as *const _ as usize },
        4096usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_cmd),
            "::",
            stringify!(zc_nvlist_src)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_cmd>())).zc_nvlist_src_size as *const _ as usize },
        4104usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_cmd),
            "::",
            stringify!(zc_nvlist_src_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_cmd>())).zc_nvlist_dst as *const _ as usize },
        4112usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_cmd),
            "::",
            stringify!(zc_nvlist_dst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_cmd>())).zc_nvlist_dst_size as *const _ as usize },
        4120usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_cmd),
            "::",
            stringify!(zc_nvlist_dst_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_cmd>())).zc_nvlist_dst_filled as *const _ as usize },
        4128usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_cmd),
            "::",
            stringify!(zc_nvlist_dst_filled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_cmd>())).zc_pad2 as *const _ as usize },
        4132usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_cmd),
            "::",
            stringify!(zc_pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_cmd>())).zc_history as *const _ as usize },
        4136usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_cmd),
            "::",
            stringify!(zc_history)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_cmd>())).zc_value as *const _ as usize },
        4144usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_cmd),
            "::",
            stringify!(zc_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_cmd>())).zc_string as *const _ as usize },
        12336usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_cmd),
            "::",
            stringify!(zc_string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_cmd>())).zc_guid as *const _ as usize },
        12592usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_cmd),
            "::",
            stringify!(zc_guid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_cmd>())).zc_nvlist_conf as *const _ as usize },
        12600usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_cmd),
            "::",
            stringify!(zc_nvlist_conf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_cmd>())).zc_nvlist_conf_size as *const _ as usize },
        12608usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_cmd),
            "::",
            stringify!(zc_nvlist_conf_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_cmd>())).zc_cookie as *const _ as usize },
        12616usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_cmd),
            "::",
            stringify!(zc_cookie)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_cmd>())).zc_objset_type as *const _ as usize },
        12624usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_cmd),
            "::",
            stringify!(zc_objset_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_cmd>())).zc_perm_action as *const _ as usize },
        12632usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_cmd),
            "::",
            stringify!(zc_perm_action)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_cmd>())).zc_history_len as *const _ as usize },
        12640usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_cmd),
            "::",
            stringify!(zc_history_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_cmd>())).zc_history_offset as *const _ as usize },
        12648usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_cmd),
            "::",
            stringify!(zc_history_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_cmd>())).zc_obj as *const _ as usize },
        12656usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_cmd),
            "::",
            stringify!(zc_obj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_cmd>())).zc_iflags as *const _ as usize },
        12664usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_cmd),
            "::",
            stringify!(zc_iflags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_cmd>())).zc_share as *const _ as usize },
        12672usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_cmd),
            "::",
            stringify!(zc_share)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_cmd>())).zc_objset_stats as *const _ as usize },
        12704usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_cmd),
            "::",
            stringify!(zc_objset_stats)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_cmd>())).zc_begin_record as *const _ as usize },
        12992usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_cmd),
            "::",
            stringify!(zc_begin_record)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_cmd>())).zc_inject_record as *const _ as usize },
        13296usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_cmd),
            "::",
            stringify!(zc_inject_record)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_cmd>())).zc_defer_destroy as *const _ as usize },
        13648usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_cmd),
            "::",
            stringify!(zc_defer_destroy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_cmd>())).zc_flags as *const _ as usize },
        13652usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_cmd),
            "::",
            stringify!(zc_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_cmd>())).zc_action_handle as *const _ as usize },
        13656usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_cmd),
            "::",
            stringify!(zc_action_handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_cmd>())).zc_cleanup_fd as *const _ as usize },
        13664usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_cmd),
            "::",
            stringify!(zc_cleanup_fd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_cmd>())).zc_simple as *const _ as usize },
        13668usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_cmd),
            "::",
            stringify!(zc_simple)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_cmd>())).zc_pad as *const _ as usize },
        13669usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_cmd),
            "::",
            stringify!(zc_pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_cmd>())).zc_sendobj as *const _ as usize },
        13672usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_cmd),
            "::",
            stringify!(zc_sendobj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_cmd>())).zc_fromobj as *const _ as usize },
        13680usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_cmd),
            "::",
            stringify!(zc_fromobj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_cmd>())).zc_createtxg as *const _ as usize },
        13688usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_cmd),
            "::",
            stringify!(zc_createtxg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_cmd>())).zc_stat as *const _ as usize },
        13696usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_cmd),
            "::",
            stringify!(zc_stat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_cmd>())).zc_zoneid as *const _ as usize },
        13736usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_cmd),
            "::",
            stringify!(zc_zoneid)
        )
    );
}
impl Default for zfs_cmd {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
